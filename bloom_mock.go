// Code generated by MockGen. DO NOT EDIT.
// Source: bloom.go

// Package bloom_filter is a generated GoMock package.
package bloom_filter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBitArray is a mock of BitArray interface.
type MockBitArray struct {
	ctrl     *gomock.Controller
	recorder *MockBitArrayMockRecorder
}

// MockBitArrayMockRecorder is the mock recorder for MockBitArray.
type MockBitArrayMockRecorder struct {
	mock *MockBitArray
}

// NewMockBitArray creates a new mock instance.
func NewMockBitArray(ctrl *gomock.Controller) *MockBitArray {
	mock := &MockBitArray{ctrl: ctrl}
	mock.recorder = &MockBitArrayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBitArray) EXPECT() *MockBitArrayMockRecorder {
	return m.recorder
}

// GetBits mocks base method.
func (m *MockBitArray) GetBits(offsets []uint32) ([]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBits", offsets)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBits indicates an expected call of GetBits.
func (mr *MockBitArrayMockRecorder) GetBits(offsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBits", reflect.TypeOf((*MockBitArray)(nil).GetBits), offsets)
}

// SetBits mocks base method.
func (m *MockBitArray) SetBits(offsets []uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBits", offsets)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBits indicates an expected call of SetBits.
func (mr *MockBitArrayMockRecorder) SetBits(offsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBits", reflect.TypeOf((*MockBitArray)(nil).SetBits), offsets)
}
